import { GoogleGenAI, Modality, GenerateContentResponse } from "@google/genai";

if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable is not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const fileToBase64 = (file: File): Promise<string> => {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = () => {
            const result = reader.result as string;
            // remove "data:image/jpeg;base64," prefix
            const base64String = result.split(',')[1];
            resolve(base64String);
        };
        reader.onerror = (error) => reject(error);
    });
};

export const generateVirtualTryOn = async (personFile: File, outfitFile: File): Promise<string> => {
    try {
        const personBase64 = await fileToBase64(personFile);
        const outfitBase64 = await fileToBase64(outfitFile);

        const personImagePart = {
            inlineData: {
                data: personBase64,
                mimeType: personFile.type,
            },
        };

        const outfitImagePart = {
            inlineData: {
                data: outfitBase64,
                mimeType: outfitFile.type,
            },
        };

        const textPart = {
            text: "You are a virtual try-on expert. Your task is to realistically place the clothing item(s) from the second image onto the person in the first image. Maintain the person's pose, body shape, and face. The background should be clean and simple, closely matching the background of the person's original photo. The final output must be only the generated image, with no text or other artifacts.",
        };

        const response: GenerateContentResponse = await ai.models.generateContent({
            model: 'gemini-2.5-flash-image-preview',
            contents: {
                parts: [personImagePart, outfitImagePart, textPart],
            },
            config: {
                responseModalities: [Modality.IMAGE, Modality.TEXT],
            },
        });

        for (const part of response.candidates[0].content.parts) {
            if (part.inlineData) {
                return part.inlineData.data;
            }
        }

        throw new Error("No image was generated by the API.");
    } catch (error) {
        console.error("Error generating virtual try-on:", error);
        throw new Error("Failed to communicate with the AI model. Please check your setup and try again.");
    }
};
